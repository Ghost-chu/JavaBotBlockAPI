plugins{
    id 'com.jfrog.bintray' version '1.8.5'
    id 'java'
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'maven'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'net.kyori.blossom' version '1.1.0'
}

def ver = new Version(major: 6, minor: 3, patch: 2)

allprojects {
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'com.github.johnrengelman.shadow'
    
    group = "org.botblock"
    version = "$ver"
    
    ext {

        dependencies {
            api group: 'org.json', name: 'json', version: '20200518'
            api group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.8.0'
            api group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
            api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
            
            artifactId = (rootProject == project? project.name : "$rootProject.name-$project.name").toLowerCase()
            moduleName = "${group}.javabotblockapi${rootProject == project? "" : ".${project.name.toLowerCase()}"}"
        }


        configureJar = { Object jarConfig, String classifier = '' ->
            jarConfig.baseName = "$project.artifactId"
            jarConfig.version = "$project.version"
            jarConfig.classifier = classifier
            jarConfig.extension = 'jar'
            
            jarConfig.manifest {
                it.attributes(
                        'Implementation-Title': project.artifactId,
                        'Implementation-Version': project.version,
                        'Automatic-Module-Name': "${project.moduleName}"
                )
            }
        }
        
        configureJavadoc = { Object jDocConfig ->
            jDocConfig.options {
                it.author()
                it.encoding = 'UTF-8'
                it.memberLevel = JavadocMemberLevel.PROTECTED

                if (it instanceof StandardJavadocDocletOptions) {
                    def opt = it as StandardJavadocDocletOptions

                    opt.links(
                            // JSON Lib
                            "https://stleary.github.io/JSON-java/",
                            
                            // Discord Libs
                            "https://ci.dv8tion.net/job/JDA/javadoc/",
                            
                            // Java 8
                            "https://docs.oracle.com/javase/8/docs/api/",
                            
                            // BotBlock Docs
                            "https://docs.botblock.org/JavaBotBlockAPI/core/",
                            "https://docs.botblock.org/JavaBotBlockAPI/jda/",
                            //"https://docs.botblock.org/JavaBotBlockAPI/javacord/",
                            "https://docs.botblock.org/JavaBotBlockAPI/request/"
                    )

                    if (JavaVersion.current().isJava9Compatible()) {
                        opt.addBooleanOption("html5", true)
                        opt.addStringOption("-release", "8")
                    }

                    if (JavaVersion.current().isJava11Compatible()) {
                        opt.addBooleanOption("-no-module-directories", true)
                    }
                }
            }
        }
    }

    repositories {
        mavenCentral()
        jcenter()
    }
    
    build {
        dependsOn { jar }
        dependsOn { javadocJar }
        dependsOn { sourcesJar }
        dependsOn { shadowJar }
    }
    
    bintray {
        user = System.getenv("BintrayUser")
        key = System.getenv("BintrayApiKey")
        publications = ['BintrayRelease']
        publish = true
        pkg {
            repo = 'maven'
            name = 'JavaBotBlockAPI'
            licenses = ['MIT']
            vcsUrl = 'https://github.com/botblock/JavaBotBlockAPI'
            version {
                name = project.version
                released = new Date()
                vcsTag = System.getenv("VcsTag")
            }
        }
    }
    
    bintrayUpload {
        dependsOn { rootProject.getTasksByName('build', true) }
    }
    
    publishing {
        publications {
            BintrayRelease(MavenPublication) {
                it.groupId = project.group
                it.artifactId = project.artifactId
                it.version = project.version
            }
        }
    }
    
}

subprojects {
    apply plugin: 'java'
    
    ext {
        includeInParent = true
    }
    
    compileJava {
        source = sourceSets.main.allJava
        classpath = sourceSets.main.compileClasspath
    }
    
    javadoc {
        destinationDir = file("$rootDir/docs/$project.name/")
        
        configureJavadoc(it)
    }
    
    jar {
        destinationDirectory = file("$rootDir/build/libs/")
        configureJar(it)
    }
    
    shadowJar {
        destinationDirectory = file("$rootDir/build/libs/")
        configureJar(it, 'all')
    }
    
    task javadocJar(type: Jar) {
        group = 'build'
        dependsOn javadoc
        from javadoc.destinationDir
        configureJar(it, 'javadoc')
        destinationDirectory = file("$rootDir/build/libs/")
    }
    
    task sourceJar(type: Jar) {
        group = 'build'
        dependsOn classes
        from sourceSets.main.allSource
        configureJar(it, 'sources')
        destinationDirectory = file("$rootDir/build/libs/")
    }
    
    publishing {
        publications {
            BintrayRelease(MavenPublication) {
                from components.java
                artifact javadocJar
                artifact sourceJar
            }
        }
    }
    
    afterEvaluate {
        if(project.includeInParent) {
            rootProject.dependencies.compile project
        }
    }
    
    blossom{
        replaceToken("API_VERSION", version)
    }
}

configurations {
    compile {
        description = 'compile'
        transitive = true
    }
}

shadowJar{
    configureJar(it, 'all')
    
    from { subprojects*.jar }
    destinationDirectory = file("$rootDir/build/libs/")
}

task javadocJar(type: Jar, dependsOn: javadoc){
    configureJar(it, 'javadoc')
    
    from { javadoc.destinationDir }
    destinationDirectory = file("$rootDir/build/libs/")
}


task sourcesJar(type: Jar, dependsOn: classes){
    group = 'build'
    dependsOn { rootProject.getTasksByName('classes', true) }
    
    configureJar(it, 'sources')
    
    from { subprojects*.sourceSets.main.allSource }
    destinationDirectory = file("$rootDir/build/libs/")
}

publishing {
    publications {
        BintrayRelease(MavenPublication) {
            pom.withXml {
                def reposNode = asNode().appendNode('repositories')
                def repoNode = reposNode.appendNode('repository')
                
                repoNode.appendNode('name', 'bintray')
                repoNode.appendNode('id', 'bintray-andre601-maven')
                repoNode.appendNode('url', 'https://dl.bintray.com/andre601/maven')
                
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it instanceof ProjectDependency ? it.dependencyProject.artifactId : it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'compile')
                }
            }
        }
    }
}

class Version{
    String major, minor, patch
    
    static String getBuild(){
        System.getenv("BUILD_NUMBER") ? "_" + System.getenv("BUILD_NUMBER") : 
        System.getProperty("BUILD_NUMBER") ? "_" + System.getProperty("BUILD_NUMBER") : ""
    }
    
    String toString(){
        "$major.$minor.${patch}$build"
    }
}
